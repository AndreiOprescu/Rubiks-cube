"use strict";

import { Square } from "/square.js"

function degToRad(d) {
    return d * Math.PI / 180;
}

// export var translation = [325, 275, 0];
// export var rotation = [degToRad(135), degToRad(45), degToRad(315)];
export var translation = [0, 0, 0];
export var rotation = [degToRad(0), degToRad(0), degToRad(0)];
export var scale = [5, 5, 5];

export var colors = {

    red: [
        255, 0, 0,
        255, 0, 0,
        255, 0, 0,
        255, 0, 0,
        255, 0, 0,
        255, 0, 0
    ],

    green: [
        0, 255, 0,
        0, 255, 0,
        0, 255, 0,
        0, 255, 0,
        0, 255, 0,
        0, 255, 0
    ],

    blue: [
        0, 0, 255,
        0, 0, 255,
        0, 0, 255,
        0, 0, 255,
        0, 0, 255,
        0, 0, 255
    ],

    orange: [
        255, 165, 0,
        255, 165, 0,
        255, 165, 0,
        255, 165, 0,
        255, 165, 0,
        255, 165, 0
    ],

    white: [
        255, 255, 255,
        255, 255, 255,
        255, 255, 255,
        255, 255, 255,
        255, 255, 255,
        255, 255, 255
    ],

    yellow: [
        255, 255, 0,
        255, 255, 0,
        255, 255, 0,
        255, 255, 0,
        255, 255, 0,
        255, 255, 0
    ]
}

export var faces = {
    B: [].concat.apply([], Array(9).fill(colors.blue)),
    L: [].concat.apply([], Array(9).fill(colors.orange)),
    D: [].concat.apply([], Array(9).fill(colors.yellow)),
    F: [].concat.apply([], Array(9).fill(colors.green)),
    R: [].concat.apply([], Array(9).fill(colors.red)),
    U: [].concat.apply([], Array(9).fill(colors.white))
}

export var coordinatesArray = [0, 0, 0,
    10, 0, 0,
    0, 0, 10,
    10, 0, 0,
    0, 0, 10,
    10, 0, 10,
    // 1 
    0, 0, 10,
    10, 0, 10,
    0, 0, 20,
    10, 0, 10,
    0, 0, 20,
    10, 0, 20,
    // 2 
    0, 0, 20,
    10, 0, 20,
    0, 0, 30,
    10, 0, 20,
    0, 0, 30,
    10, 0, 30,
    // 3 
    10, 0, 0,
    20, 0, 0,
    10, 0, 10,
    20, 0, 0,
    10, 0, 10,
    20, 0, 10,
    // 4 
    10, 0, 10,
    20, 0, 10,
    10, 0, 20,
    20, 0, 10,
    10, 0, 20,
    20, 0, 20,
    // 5 
    10, 0, 20,
    20, 0, 20,
    10, 0, 30,
    20, 0, 20,
    10, 0, 30,
    20, 0, 30,
    // 6 
    20, 0, 0,
    30, 0, 0,
    20, 0, 10,
    30, 0, 0,
    20, 0, 10,
    30, 0, 10,
    // 7 
    20, 0, 10,
    30, 0, 10,
    20, 0, 20,
    30, 0, 10,
    20, 0, 20,
    30, 0, 20,
    // 8 
    20, 0, 20,
    30, 0, 20,
    20, 0, 30,
    30, 0, 20,
    20, 0, 30,
    30, 0, 30,
    // 9 
    0, 0, 0,
    0, 10, 0,
    10, 0, 0,
    0, 10, 0,
    10, 0, 0,
    10, 10, 0,
    // 10 
    0, 10, 0,
    0, 20, 0,
    10, 10, 0,
    0, 20, 0,
    10, 10, 0,
    10, 20, 0,
    // 11 
    0, 20, 0,
    0, 30, 0,
    10, 20, 0,
    0, 30, 0,
    10, 20, 0,
    10, 30, 0,
    // 12 
    10, 0, 0,
    10, 10, 0,
    20, 0, 0,
    10, 10, 0,
    20, 0, 0,
    20, 10, 0,
    // 13 
    10, 10, 0,
    10, 20, 0,
    20, 10, 0,
    10, 20, 0,
    20, 10, 0,
    20, 20, 0,
    // 14 
    10, 20, 0,
    10, 30, 0,
    20, 20, 0,
    10, 30, 0,
    20, 20, 0,
    20, 30, 0,
    // 15 
    20, 0, 0,
    20, 10, 0,
    30, 0, 0,
    20, 10, 0,
    30, 0, 0,
    30, 10, 0,
    // 16 
    20, 10, 0,
    20, 20, 0,
    30, 10, 0,
    20, 20, 0,
    30, 10, 0,
    30, 20, 0,
    // 17 
    20, 20, 0,
    20, 30, 0,
    30, 20, 0,
    20, 30, 0,
    30, 20, 0,
    30, 30, 0,
    // 18 
    0, 0, 0,
    0, 0, 10,
    0, 10, 0,
    0, 10, 0,
    0, 0, 10,
    0, 10, 10,
    // 19 
    0, 0, 10,
    0, 0, 20,
    0, 10, 10,
    0, 10, 10,
    0, 0, 20,
    0, 10, 20,
    // 20 
    0, 0, 20,
    0, 0, 30,
    0, 10, 20,
    0, 10, 20,
    0, 0, 30,
    0, 10, 30,
    // 21 
    0, 10, 0,
    0, 10, 10,
    0, 20, 0,
    0, 20, 0,
    0, 10, 10,
    0, 20, 10,
    // 22 
    0, 10, 10,
    0, 10, 20,
    0, 20, 10,
    0, 20, 10,
    0, 10, 20,
    0, 20, 20,
    // 23 
    0, 10, 20,
    0, 10, 30,
    0, 20, 20,
    0, 20, 20,
    0, 10, 30,
    0, 20, 30,
    // 24 
    0, 20, 0,
    0, 20, 10,
    0, 30, 0,
    0, 30, 0,
    0, 20, 10,
    0, 30, 10,
    // 25 
    0, 20, 10,
    0, 20, 20,
    0, 30, 10,
    0, 30, 10,
    0, 20, 20,
    0, 30, 20,
    // 26 
    0, 20, 20,
    0, 20, 30,
    0, 30, 20,
    0, 30, 20,
    0, 20, 30,
    0, 30, 30,
    // 27 
    0, 30, 0,
    10, 30, 0,
    0, 30, 10,
    10, 30, 0,
    0, 30, 10,
    10, 30, 10,
    // 28 
    0, 30, 10,
    10, 30, 10,
    0, 30, 20,
    10, 30, 10,
    0, 30, 20,
    10, 30, 20,
    // 29 
    0, 30, 20,
    10, 30, 20,
    0, 30, 30,
    10, 30, 20,
    0, 30, 30,
    10, 30, 30,
    // 30 
    10, 30, 0,
    20, 30, 0,
    10, 30, 10,
    20, 30, 0,
    10, 30, 10,
    20, 30, 10,
    // 31 
    10, 30, 10,
    20, 30, 10,
    10, 30, 20,
    20, 30, 10,
    10, 30, 20,
    20, 30, 20,
    // 32 
    10, 30, 20,
    20, 30, 20,
    10, 30, 30,
    20, 30, 20,
    10, 30, 30,
    20, 30, 30,
    // 33 
    20, 30, 0,
    30, 30, 0,
    20, 30, 10,
    30, 30, 0,
    20, 30, 10,
    30, 30, 10,
    // 34 
    20, 30, 10,
    30, 30, 10,
    20, 30, 20,
    30, 30, 10,
    20, 30, 20,
    30, 30, 20,
    // 35 
    20, 30, 20,
    30, 30, 20,
    20, 30, 30,
    30, 30, 20,
    20, 30, 30,
    30, 30, 30,
    // 36 
    0, 0, 30,
    0, 10, 30,
    10, 0, 30,
    0, 10, 30,
    10, 0, 30,
    10, 10, 30,
    // 37 
    0, 10, 30,
    0, 20, 30,
    10, 10, 30,
    0, 20, 30,
    10, 10, 30,
    10, 20, 30,
    // 38 
    0, 20, 30,
    0, 30, 30,
    10, 20, 30,
    0, 30, 30,
    10, 20, 30,
    10, 30, 30,
    // 39 
    10, 0, 30,
    10, 10, 30,
    20, 0, 30,
    10, 10, 30,
    20, 0, 30,
    20, 10, 30,
    // 40 
    10, 10, 30,
    10, 20, 30,
    20, 10, 30,
    10, 20, 30,
    20, 10, 30,
    20, 20, 30,
    // 41 
    10, 20, 30,
    10, 30, 30,
    20, 20, 30,
    10, 30, 30,
    20, 20, 30,
    20, 30, 30,
    // 42 
    20, 0, 30,
    20, 10, 30,
    30, 0, 30,
    20, 10, 30,
    30, 0, 30,
    30, 10, 30,
    // 43 
    20, 10, 30,
    20, 20, 30,
    30, 10, 30,
    20, 20, 30,
    30, 10, 30,
    30, 20, 30,
    // 44 
    20, 20, 30,
    20, 30, 30,
    30, 20, 30,
    20, 30, 30,
    30, 20, 30,
    30, 30, 30,
    // 45 
    30, 0, 0,
    30, 0, 10,
    30, 10, 0,
    30, 10, 0,
    30, 0, 10,
    30, 10, 10,
    // 46 
    30, 0, 10,
    30, 0, 20,
    30, 10, 10,
    30, 10, 10,
    30, 0, 20,
    30, 10, 20,
    // 47 
    30, 0, 20,
    30, 0, 30,
    30, 10, 20,
    30, 10, 20,
    30, 0, 30,
    30, 10, 30,
    // 48 
    30, 10, 0,
    30, 10, 10,
    30, 20, 0,
    30, 20, 0,
    30, 10, 10,
    30, 20, 10,
    // 49 
    30, 10, 10,
    30, 10, 20,
    30, 20, 10,
    30, 20, 10,
    30, 10, 20,
    30, 20, 20,
    // 50 
    30, 10, 20,
    30, 10, 30,
    30, 20, 20,
    30, 20, 20,
    30, 10, 30,
    30, 20, 30,
    // 51 
    30, 20, 0,
    30, 20, 10,
    30, 30, 0,
    30, 30, 0,
    30, 20, 10,
    30, 30, 10,
    // 52 
    30, 20, 10,
    30, 20, 20,
    30, 30, 10,
    30, 30, 10,
    30, 20, 20,
    30, 30, 20,
    // 53 
    30, 20, 20,
    30, 20, 30,
    30, 30, 20,
    30, 30, 20,
    30, 20, 30,
    30, 30, 30
    // 54 
]

export var colorsArray = faces.B.concat(faces.L, faces.D, faces.F, faces.R, faces.U);

export var squares = [];

export function swap(swaps) {
    var keys = swaps[0];
    var face1 = keys[0];
    var face2 = keys[1];
    var indexes = swaps[1];
    var square1 = indexes[0][0];
    var square2 = indexes[1][0];
    var n_swaps = indexes[0][1] - indexes[0][0];
    var faceCoords = {B: 0, L: 1, D: 2, F: 3, R: 4, U: 5}
    for (var i = 0; i < n_swaps; i++) {
        var temp = coordinatesArray[faceCoords[face1] * 3*3*2*9 + square1 + i];
        coordinatesArray[faceCoords[face1] * 3*3*2*9 + square1 + i] = coordinatesArray[faceCoords[face2] * 3*3*2*9 + square2 + i];
        coordinatesArray[faceCoords[face2] * 3*3*2*9 + square2 + i] = temp;
    }
}
;
export var turns = {
    U: function (render, images) {
        // swap([["R", "B"], [[6*18, 9*18], [6*18, 9*18]]]); 
        swap([["R", "B"], [[8 * 18, 9 * 18], [8 * 18, 9 * 18]]]);
        swap([["R", "B"], [[7 * 18, 8 * 18], [7 * 18, 8 * 18]]]);
        swap([["R", "B"], [[6 * 18, 7 * 18], [6 * 18, 7 * 18]]]);

        // swap([["B", "L"], [[6*18, 9*18], [6*18, 9*18]]]); 
        swap([["B", "L"], [[6 * 18, 7 * 18], [8 * 18, 9 * 18]]]);
        swap([["B", "L"], [[7 * 18, 8 * 18], [7 * 18, 8 * 18]]]);
        swap([["B", "L"], [[8 * 18, 9 * 18], [6 * 18, 7 * 18]]]);

        // swap([["L", "F"], [[6*18, 9*18], [6*18, 9*18]]]); 
        swap([["L", "F"], [[6 * 18, 7 * 18], [6 * 18, 7 * 18]]]);
        swap([["L", "F"], [[7 * 18, 8 * 18], [7 * 18, 8 * 18]]]);
        swap([["L", "F"], [[8 * 18, 9 * 18], [8 * 18, 9 * 18]]]);

        this.circle("U", false)
        this.update(render, images)
    },
    F: function (render, images) {
        // swap([["U", "L"], [[0, 3*18], [0, 3*18]]]); 
        swap([["U", "L"], [[6 * 18, 7 * 18], [2 * 18, 3 * 18]]])
        swap([["U", "L"], [[7 * 18, 8 * 18], [5 * 18, 6 * 18]]])
        swap([["U", "L"], [[8 * 18, 9 * 18], [8 * 18, 9 * 18]]])

        // swap([["L", "D"], [[0, 3*18], [6*18, 9*18]]]);
        swap([["L", "D"], [[8 * 18, 9 * 18], [6 * 18, 7 * 18]]])
        swap([["L", "D"], [[5 * 18, 6 * 18], [7 * 18, 8 * 18]]])
        swap([["L", "D"], [[2 * 18, 3 * 18], [8 * 18, 9 * 18]]])

        // swap([["D", "R"], [[6*18, 9*18], [0, 3*18]]]); 
        swap([["D", "R"], [[6 * 18, 7 * 18], [2 * 18, 3 * 18]]])
        swap([["D", "R"], [[7 * 18, 8 * 18], [5 * 18, 6 * 18]]])
        swap([["D", "R"], [[8 * 18, 9 * 18], [8 * 18, 9 * 18]]])

        this.circle("F", true)
        this.update(render, images)
    },
    R: function (render, images) {
        // U --> F
        swap([["U", "F"], [[2 * 18, 3 * 18], [8 * 18, 9 * 18]]])
        swap([["U", "F"], [[5 * 18, 6 * 18], [5 * 18, 6 * 18]]])
        swap([["U", "F"], [[8 * 18, 9 * 18], [2 * 18, 3 * 18]]])

        // F --> D
        swap([["F", "D"], [[2 * 18, 3 * 18], [2 * 18, 3 * 18]]])
        swap([["F", "D"], [[5 * 18, 6 * 18], [5 * 18, 6 * 18]]])
        swap([["F", "D"], [[8 * 18, 9 * 18], [8 * 18, 9 * 18]]])

        // D --> B
        swap([["D", "B"], [[2 * 18, 3 * 18], [8 * 18, 9 * 18]]])
        swap([["D", "B"], [[5 * 18, 6 * 18], [5 * 18, 6 * 18]]])
        swap([["D", "B"], [[8 * 18, 9 * 18], [2 * 18, 3 * 18]]])

        this.circle("R", false)
        this.update(render, images)
    },
    D: function (render, images) {
        // F R
        swap([["F", "R"], [[0 * 18, 1 * 18], [2 * 18, 3 * 18]]])
        swap([["F", "R"], [[1 * 18, 2 * 18], [1 * 18, 2 * 18]]])
        swap([["F", "R"], [[2 * 18, 3 * 18], [0 * 18, 1 * 18]]])

        // L F
        swap([["L", "F"], [[0 * 18, 1 * 18], [0 * 18, 1 * 18]]])
        swap([["L", "F"], [[1 * 18, 2 * 18], [1 * 18, 2 * 18]]])
        swap([["L", "F"], [[2 * 18, 3 * 18], [2 * 18, 3 * 18]]])

        // B L
        swap([["B", "L"], [[0 * 18, 1 * 18], [2 * 18, 3 * 18]]])
        swap([["B", "L"], [[1 * 18, 2 * 18], [1 * 18, 2 * 18]]])
        swap([["B", "L"], [[2 * 18, 3 * 18], [0 * 18, 1 * 18]]])

        this.circle("D", true)
        this.update(render, images)
    },
    B: function (render, images) {
        // L D
        swap([["D", "L"], [[2 * 18, 3 * 18], [0 * 18, 1 * 18]]])
        swap([["D", "L"], [[1 * 18, 2 * 18], [3 * 18, 4 * 18]]])
        swap([["D", "L"], [[0 * 18, 1 * 18], [6 * 18, 7 * 18]]])

        // L U
        swap([["U", "L"], [[0 * 18, 1 * 18], [0 * 18, 1 * 18]]])
        swap([["U", "L"], [[1 * 18, 2 * 18], [3 * 18, 4 * 18]]])
        swap([["U", "L"], [[2 * 18, 3 * 18], [6 * 18, 7 * 18]]])

        // R U
        swap([["U", "R"], [[2 * 18, 3 * 18], [0 * 18, 1 * 18]]])
        swap([["U", "R"], [[1 * 18, 2 * 18], [3 * 18, 4 * 18]]])
        swap([["U", "R"], [[0 * 18, 1 * 18], [6 * 18, 7 * 18]]])

        this.circle("B", false)
        this.update(render, images)
    },
    L: function (render, images) {
        // B <--> D
        swap([["B", "D"], [[0 * 18, 1 * 18], [6 * 18, 7 * 18]]])
        swap([["B", "D"], [[3 * 18, 4 * 18], [3 * 18, 4 * 18]]])
        swap([["B", "D"], [[6 * 18, 7 * 18], [0 * 18, 1 * 18]]])

        // F <--> D
        swap([["F", "D"], [[0 * 18, 1 * 18], [0 * 18, 1 * 18]]])
        swap([["F", "D"], [[3 * 18, 4 * 18], [3 * 18, 4 * 18]]])
        swap([["F", "D"], [[6 * 18, 7 * 18], [6 * 18, 7 * 18]]])

        // F <--> U
        swap([["F", "U"], [[0 * 18, 1 * 18], [6 * 18, 7 * 18]]])
        swap([["F", "U"], [[3 * 18, 4 * 18], [3 * 18, 4 * 18]]])
        swap([["F", "U"], [[6 * 18, 7 * 18], [0 * 18, 1 * 18]]])

        this.circle("L", true)
        this.update(render, images)
    },
    U_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.U(render, images)
        }
    },
    F_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.F(render, images)
        }
    },
    R_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.R(render, images)
        }
    },
    D_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.D(render, images)
        }
    },
    B_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.B(render, images)
        }
    },
    L_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.L(render, images)
        }
    },

    M: function (render, images) {
        // D B
        swap([["B", "D"], [[7 * 18, 8 * 18], [1 * 18, 2 * 18]]])
        swap([["B", "D"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["B", "D"], [[1 * 18, 2 * 18], [7 * 18, 8 * 18]]])

        // F D
        swap([["F", "D"], [[7 * 18, 8 * 18], [7 * 18, 8 * 18]]])
        swap([["F", "D"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["F", "D"], [[1 * 18, 2 * 18], [1 * 18, 2 * 18]]])

        // U F
        swap([["U", "F"], [[7 * 18, 8 * 18], [1 * 18, 2 * 18]]])
        swap([["U", "F"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["U", "F"], [[1 * 18, 2 * 18], [7 * 18, 8 * 18]]])

        this.update(render, images)
    },
    E: function (render, images) {
        // L B
        swap([["L", "B"], [[3 * 18, 4 * 18], [5 * 18, 6 * 18]]])
        swap([["L", "B"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["L", "B"], [[5 * 18, 6 * 18], [3 * 18, 4 * 18]]])

        // L F
        swap([["F", "L"], [[3 * 18, 4 * 18], [3 * 18, 4 * 18]]])
        swap([["F", "L"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["F", "L"], [[5 * 18, 6 * 18], [5 * 18, 6 * 18]]])

        // F R
        swap([["F", "R"], [[3 * 18, 4 * 18], [5 * 18, 6 * 18]]])
        swap([["F", "R"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["F", "R"], [[5 * 18, 6 * 18], [3 * 18, 4 * 18]]])

        this.update(render, images)
    },
    S: function (render, images) {
        // R D
        swap([["D", "R"], [[3 * 18, 4 * 18], [1 * 18, 2 * 18]]])
        swap([["D", "R"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["D", "R"], [[5 * 18, 6 * 18], [7 * 18, 8 * 18]]])

        // D L
        swap([["D", "L"], [[3 * 18, 4 * 18], [7 * 18, 8 * 18]]])
        swap([["D", "L"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["D", "L"], [[5 * 18, 6 * 18], [1 * 18, 2 * 18]]])

        // L U
        swap([["U", "L"], [[3 * 18, 4 * 18], [1 * 18, 2 * 18]]])
        swap([["U", "L"], [[4 * 18, 5 * 18], [4 * 18, 5 * 18]]])
        swap([["U", "L"], [[5 * 18, 6 * 18], [7 * 18, 8 * 18]]])

        this.update(render, images)
    },
    M_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.M(render, images)
        }
    },
    E_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.E(render, images)
        }
    },
    S_p: function (render, images) {
        for (var i = 0; i < 3; i++) {
            this.S(render, images)
        }
    },
    x: function (render, images) {
        this.M_p(render, images);
        this.R(render, images);
        this.L_p(render, images);
    },
    y: function (render, images) {
        this.E_p(render, images);
        this.U(render, images);
        this.D_p(render, images);
    },
    z: function (render, images) {
        this.S_p(render, images);
        this.F(render, images);
        this.B_p(render, images);
    },
    update: function (render, images) {
        colorsArray = faces.B.concat(faces.L, faces.D, faces.F, faces.R, faces.U);
        render(images);
    },
    circle: function (face, inverse) {
        var corners = [1, 3, 9, 7]
        var edges = [2, 6, 8, 4]
        if (inverse) {
            for (var i = 1; i < 5; i++) {
                swap([[face, face], [[(corners[i] - 1) * 18, corners[i] * 18], [(corners[(i + 1) % 4] - 1) * 18, corners[(i + 1) % 4] * 18]]])
                swap([[face, face], [[(edges[i] - 1) * 18, edges[i] * 18], [(edges[(i + 1) % 4] - 1) * 18, edges[(i + 1) % 4] * 18]]])
            }
        }
        else if (!inverse) {
            for (var i = 4; i > 0; i--) {
                swap([[face, face], [[(corners[i] - 1) * 18, corners[i] * 18], [(corners[(i - 1) % 4] - 1) * 18, corners[(i - 1) % 4] * 18]]])
                swap([[face, face], [[(edges[i] - 1) * 18, edges[i] * 18], [(edges[(i - 1) % 4] - 1) * 18, edges[(i - 1) % 4] * 18]]])
            }
        }
    }
}

export function setSquares(gl, images, program) {
    squares = [];
    for(var i = 0; i < 6; i++) {
        for (var j = 1; j <= 3; j++) {
            for (var k = 1; k <= 3; k++) {
                squares.push(new Square(
                    gl,
                    coordinatesArray.slice((i * 9 + (j - 1) * 3 + k-1) * 3 * 3 * 2, (i * 9 + (j - 1) * 3 + k) * 3 * 3 * 2),
                    colorsArray.slice((i * 9 + (j - 1) * 3 + k-1) * 3 * 3 * 2, (i * 9 + (j - 1) * 3 + k) * 3 * 3 * 2),
                    images[i],
                    [(j - 1) / 3, (k - 1) / 3,
                    (j) / 3, (k - 1) / 3,
                    (j - 1) / 3, (k) / 3,

                    (j) / 3, (k - 1) / 3,
                    (j - 1) / 3, (k) / 3,
                    (j) / 3, (k) / 3],
                    program
                ));
            }
        }
        
    }
    console.log(squares)
}